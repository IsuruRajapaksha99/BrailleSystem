//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BraileCal.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.WebService1Soap")]
    public interface WebService1Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/calculateCircumference", ReplyAction="*")]
        double calculateCircumference(double radius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/calculateCircumference", ReplyAction="*")]
        System.Threading.Tasks.Task<double> calculateCircumferenceAsync(double radius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/calculateTrianglePerimeter", ReplyAction="*")]
        double calculateTrianglePerimeter(double side1, double side2, double side3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/calculateTrianglePerimeter", ReplyAction="*")]
        System.Threading.Tasks.Task<double> calculateTrianglePerimeterAsync(double side1, double side2, double side3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/calculateRectanglePerimeter", ReplyAction="*")]
        double calculateRectanglePerimeter(double length, double breadth);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/calculateRectanglePerimeter", ReplyAction="*")]
        System.Threading.Tasks.Task<double> calculateRectanglePerimeterAsync(double length, double breadth);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebService1SoapChannel : BraileCal.ServiceReference1.WebService1Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebService1SoapClient : System.ServiceModel.ClientBase<BraileCal.ServiceReference1.WebService1Soap>, BraileCal.ServiceReference1.WebService1Soap {
        
        public WebService1SoapClient() {
        }
        
        public WebService1SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double calculateCircumference(double radius) {
            return base.Channel.calculateCircumference(radius);
        }
        
        public System.Threading.Tasks.Task<double> calculateCircumferenceAsync(double radius) {
            return base.Channel.calculateCircumferenceAsync(radius);
        }
        
        public double calculateTrianglePerimeter(double side1, double side2, double side3) {
            return base.Channel.calculateTrianglePerimeter(side1, side2, side3);
        }
        
        public System.Threading.Tasks.Task<double> calculateTrianglePerimeterAsync(double side1, double side2, double side3) {
            return base.Channel.calculateTrianglePerimeterAsync(side1, side2, side3);
        }
        
        public double calculateRectanglePerimeter(double length, double breadth) {
            return base.Channel.calculateRectanglePerimeter(length, breadth);
        }
        
        public System.Threading.Tasks.Task<double> calculateRectanglePerimeterAsync(double length, double breadth) {
            return base.Channel.calculateRectanglePerimeterAsync(length, breadth);
        }
    }
}
